name: Deploy Strapi to ECS with CodeDeploy

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: strapi-app-tohid
  ECR_REGISTRY: 607700977843.dkr.ecr.us-east-2.amazonaws.com
  ECS_CLUSTER: tohid-task12-cluster
  ECS_SERVICE: tohid-task12-service
  CODEPLOY_APP: tohid-task12-codedeploy-app
  CODEPLOY_DEPLOYMENT_GROUP: tohid-task12-deployment-group

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image
        id: build-image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG ./strapi-app
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_url=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: terraform9_task12

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="ecr_image_url=${{ steps.build-image.outputs.image_url }}"
        working-directory: terraform9_task12
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Wait for ECS service to be ready
        run: |
          echo "Waiting for ECS service to be ready..."
          
          # Wait for service to exist and be stable
          MAX_WAIT_TIME=600  # 10 minutes
          WAIT_TIME=0
          SLEEP_INTERVAL=30
          
          while [ $WAIT_TIME -lt $MAX_WAIT_TIME ]; do
            # Check if service exists and get its status
            SERVICE_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].status' --output text 2>/dev/null || echo "NOT_FOUND")
            
            if [ "$SERVICE_STATUS" = "NOT_FOUND" ] || [ "$SERVICE_STATUS" = "None" ]; then
              echo "Service not found yet, waiting... (waited ${WAIT_TIME}s)"
              sleep $SLEEP_INTERVAL
              WAIT_TIME=$((WAIT_TIME + SLEEP_INTERVAL))
              continue
            fi
            
            # Get running and desired counts
            RUNNING_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].runningCount' --output text 2>/dev/null || echo "0")
            DESIRED_COUNT=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].desiredCount' --output text 2>/dev/null || echo "0")
            
            echo "Service Status: $SERVICE_STATUS, Running: $RUNNING_COUNT/$DESIRED_COUNT (waited ${WAIT_TIME}s)"
            
            if [ "$SERVICE_STATUS" = "ACTIVE" ] && [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ] && [ "$RUNNING_COUNT" -gt 0 ]; then
              echo "ECS service is ready!"
              break
            fi
            
            sleep $SLEEP_INTERVAL
            WAIT_TIME=$((WAIT_TIME + SLEEP_INTERVAL))
          done
          
          if [ $WAIT_TIME -ge $MAX_WAIT_TIME ]; then
            echo "Timeout waiting for ECS service to be ready"
            echo "Current service status:"
            aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,PendingCount:pendingCount}' --output table
            exit 1
          fi

      - name: Update ECS Task Definition
        id: update-task-def
        run: |
          # Get current task definition
          TASK_DEF_ARN=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].taskDefinition' --output text)
          
          # Get task definition details and filter out metadata fields
          TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_ARN --query 'taskDefinition' --output json)
          
          # Create a clean task definition for registration (remove metadata fields and handle null tags)
          CLEAN_TASK_DEF=$(echo $TASK_DEF | jq '{
            family: .family,
            taskRoleArn: .taskRoleArn,
            executionRoleArn: .executionRoleArn,
            networkMode: .networkMode,
            containerDefinitions: .containerDefinitions,
            volumes: .volumes,
            placementConstraints: .placementConstraints,
            requiresCompatibilities: .requiresCompatibilities,
            cpu: .cpu,
            memory: .memory
          } + (if .tags then {tags: .tags} else {} end)')
          
          # Update container image
          UPDATED_TASK_DEF=$(echo $CLEAN_TASK_DEF | jq --arg IMAGE_URL "${{ steps.build-image.outputs.image_url }}" '.containerDefinitions[0].image = $IMAGE_URL')
          
          # Register new task definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEF" --query 'taskDefinition.taskDefinitionArn' --output text)
          
          echo "new_task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "Updated task definition: $NEW_TASK_DEF_ARN"

      - name: Create CodeDeploy Deployment
        id: codedeploy
        run: |
          # Create appspec.json for CodeDeploy
          cat > appspec.json << EOF
          {
            "version": 0.0,
            "Resources": [
              {
                "TargetService": {
                  "Type": "AWS::ECS::Service",
                  "Properties": {
                    "TaskDefinition": "${{ steps.update-task-def.outputs.new_task_def_arn }}",
                    "LoadBalancerInfo": {
                      "ContainerName": "strapi",
                      "ContainerPort": 1337
                    }
                  }
                }
              }
            ]
          }
          EOF
          
          # Create deployment using properly structured revision file
          jq -n --arg content "$(cat appspec.json | jq -c .)" '{
            "revisionType": "AppSpecContent",
            "appSpecContent": {
              "content": $content
            }
          }' > revision.json
          DEPLOYMENT_RESPONSE=$(aws deploy create-deployment \
            --application-name $CODEPLOY_APP \
            --deployment-group-name $CODEPLOY_DEPLOYMENT_GROUP \
            --revision file://revision.json)
          
          DEPLOYMENT_ID=$(echo $DEPLOYMENT_RESPONSE | jq -r '.deploymentId')
          
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "Created deployment: $DEPLOYMENT_ID"

      - name: Wait for CodeDeploy Deployment to Complete
        run: |
          DEPLOYMENT_ID="${{ steps.codedeploy.outputs.deployment_id }}"
          echo "Waiting for deployment to finish..."
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
          echo "Deployment completed successfully!"

      - name: Deployment Summary
        run: |
          echo "âœ… Deployment completed successfully!"
          echo "Image: ${{ steps.build-image.outputs.image_url }}"
          echo "Task Definition: ${{ steps.update-task-def.outputs.new_task_def_arn }}"
          echo "Deployment ID: ${{ steps.codedeploy.outputs.deployment_id }}" 